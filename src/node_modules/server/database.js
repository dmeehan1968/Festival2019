const fs = require('fs')
const path = require('path')
const Sequelize = require('sequelize')

function associateSchema(db) {
  db.models.events.belongsTo(db.models.venues, {
    foreignKey: 'venue_id',
  })

  db.models.venues.hasMany(db.models.events, {
    foreignKey: 'venue_id',
  })

  db.models.venues.belongsToMany(db.models.tags, {
    through: db.models.venue_relatesto_tags,
    foreignKey: 'venue_id',
    otherKey: 'tag_id',
    as: 'regions'
  })

  db.models.venues.belongsTo(db.models.tags, {
    foreignKey: 'dog_id',
    as: 'dog'
  })

  db.models.venues.belongsTo(db.models.tags, {
    foreignKey: 'disabled_id',
    as: 'disabled'
  })

  db.models.venues.belongsTo(db.models.tags, {
    foreignKey: 'toilet_id',
    as: 'toilet'
  })

  db.models.events.belongsTo(db.models.contacts, {
    foreignKey: 'contact_id',
    as: 'contact',
  })

  db.models.events.belongsTo(db.models.contacts, {
    foreignKey: 'bookingcontact_id',
    as: 'bookingcontact',
  })

  db.models.events.belongsTo(db.models.images, {
    foreignKey: 'preferred_image_id',
    as: 'preferred_image'
  })

  db.models.events.belongsToMany(db.models.tags, {
    through: db.models.event_relatesto_tags,
    foreignKey: 'event_id',
    otherKey: 'tag_id',
  })

  db.models.events.belongsToMany(db.models.tags, {
    through: db.models.event_relatesto_tags,
    foreignKey: 'event_id',
    otherKey: 'tag_id',
    as: 'disciplines'
  })

  db.models.events.belongsToMany(db.models.tags, {
    through: db.models.event_relatesto_tags,
    foreignKey: 'event_id',
    otherKey: 'tag_id',
    as: 'eventstatus'
  })

  db.models.events.belongsToMany(db.models.tags, {
    through: db.models.event_relatesto_tags,
    foreignKey: 'event_id',
    otherKey: 'tag_id',
    as: 'eventtype'
  })

  db.models.events.belongsToMany(db.models.images, {
    through: db.models.event_relatesto_images,
    foreignKey: 'event_id',
    otherKey: 'image_id',
    as: 'images'
  })

  db.models.events.hasMany(db.models.opening_times, {
    foreignKey: 'event_id',
  })

  db.models.tags.belongsTo(db.models.tag_categories, {
    foreignKey: 'tag_category_id',
  })

  return db.sync({ alter: false })
}

const includeTags = ({ db, ...options }) => {
  return {
    model: db.models.tags,
    as: options.as || options.category,
    attributes: {
      exclude: [ 'tag_category_id' ],
    },
    through: {
      attributes: [],
    },
    include: [
      {
        model: db.models.tag_categories,
        attributes: [],
        where: {
          category: options.category,
        },
      },
    ],
  }
}

function addScopes(db) {
  db.models.events.addScope('defaultScope', {
    include: [
      {
        association: 'venue',
        attributes: {
          exclude: [ 'dog_id', 'toilet_id', 'disabled_id' ],
        },
        include: [
          includeTags({ db, category: 'region', as: 'regions' }),
          {
            association: 'dog',
            attributes: {
              exclude: [ 'tag_category_id' ]
            }
          },
          {
            association: 'disabled',
            attributes: {
              exclude: [ 'tag_category_id' ]
            }
          },
          {
            association: 'toilet',
            attributes: {
              exclude: [ 'tag_category_id' ]
            }
          },
        ],
      },
      'contact',
      'bookingcontact',
      'preferred_image',
      {
        association: 'images',
        through: {
          attributes: [],
        },
      },
      includeTags({ db, category: 'discipline', as: 'disciplines' }),
      includeTags({ db, category: 'eventstatus' }),
      includeTags({ db, category: 'eventtype' }),
    ],
    order: [ 'title' ]
  }, {
    override: true
  })

  db.models.events.addScope('eventlist', {
    attributes: [ 'id', 'title', 'subtitle', 'shortdesc' ],
    include: [
      'preferred_image',
      {
        model: db.models.venues,
        include: [ 'regions' ],
      },
      includeTags({ db, category: 'discipline', as: 'disciplines' }),
      db.models.opening_times,
    ],
    order: [ 'title' ],
  })

  db.models.tags.addScope('regions', {
    attributes: ['id', 'description'],
    include: [
      {
        model: db.models.tag_categories,
        attributes: [],
        where: {
          category: 'region',
        }
      }
    ],
    order: [ 'description' ]
  })

  db.models.tags.addScope('disciplines', {
    attributes: ['id', 'description'],
    include: [
      {
        model: db.models.tag_categories,
        attributes: [],
        where: {
          category: 'discipline',
        }
      }
    ],
    order: [ 'description' ]
  })

  db.models.dates.addScope('defaultScope', {
    order: [ 'date' ]
  }, {
    override: true,
  })
}

function stripExtension(file) {
  const matchExtension = /\.[^\\.]+$/
  return file.replace(matchExtension, '')
}

function indexModels(dirname) {
  return new Promise((resolve, reject) => {
    fs.readdir(dirname, (err, files) => {
      if (err) return reject(err);
      resolve(files
        .map(file => path.join(dirname, file))
        .map(stripExtension)
      )
    })
  })
}

async function importSchema(db, models) {
  models.forEach(model => db.import(model))
}

export default async function database(context) {
  const db = new Sequelize(context.dbschema, context.dbuser, context.dbpass, {
    host: context.dbhost,
    dialect: 'mysql',
    operatorsAliases: false,
    logging: true,
  })

  // NB: __dirname is relative to 'dist' directory, due to babel
  return indexModels(path.resolve(__dirname, '../src/node_modules/models'))
    .then(importSchema.bind(null, db))
    .then(associateSchema.bind(null, db))
    .then(addScopes.bind(null, db))
    .then(() => db)
}
