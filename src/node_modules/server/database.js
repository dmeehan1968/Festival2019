const fs = require('fs')
const path = require('path')
const Sequelize = require('sequelize')

function associateSchema(db) {

  db.models.events.belongsTo(db.models.venues, {
    foreignKey: 'venue_id',
  })

  db.models.events.belongsTo(db.models.contacts, {
    foreignKey: 'contact_id',
    as: 'contact',
  })

  db.models.events.belongsTo(db.models.contacts, {
    foreignKey: 'bookingcontact_id',
    as: 'bookingcontact',
  })

  db.models.events.belongsTo(db.models.images, {
    foreignKey: 'preferred_image_id',
    as: 'preferred_image'
  })

  db.models.events.belongsToMany(db.models.tags, {
    through: db.models.event_relatesto_tags,
    foreignKey: 'event_id',
    otherKey: 'tag_id',
  })

  db.models.tags.belongsTo(db.models.tag_categories, {
    foreignKey: 'tag_category_id',
  })

  return db.sync({ alter: false })
}

function addScopes(db) {
  db.models.events.addScope('defaultScope', {
    include: [
      db.models.venues,
      {
        association: 'contact',
      },
      {
        association: 'bookingcontact',
      },
      {
        association: 'preferred_image',
      },
      {
        model: db.models.tags,
        include: [
          {
            model: db.models.tag_categories,
            where: {
              category: 'discipline'
            },
          },
        ],
      },
    ],
    order: [ 'title' ]
  }, {
    override: true
  })

  db.models.events.addScope('eventlist', {
    order: [ 'title' ],
  })

  db.models.tags.addScope('regions', {
  })

  db.models.tags.addScope('disciplines', {
  })

  db.models.dates.addScope('defaultScope', {
    order: [ 'date' ]
  }, {
    override: true,
  })
}

function stripExtension(file) {
  const matchExtension = /\.[^\\.]+$/
  return file.replace(matchExtension, '')
}

function indexModels(dirname) {
  return new Promise((resolve, reject) => {
    fs.readdir(dirname, (err, files) => {
      if (err) return reject(err);
      resolve(files
        .map(file => path.join(dirname, file))
        .map(stripExtension)
      )
    })
  })
}

async function importSchema(db, models) {
  models.forEach(model => db.import(model))
}

export default async function database(context) {
  const db = new Sequelize(context.dbschema, context.dbuser, context.dbpass, {
    host: context.dbhost,
    dialect: 'mysql',
    operatorsAliases: false,
    logging: true,
  })

  // NB: __dirname is relative to 'dist' directory, due to babel
  return indexModels(path.resolve(__dirname, '../src/node_modules/models'))
    .then(importSchema.bind(null, db))
    .then(associateSchema.bind(null, db))
    .then(addScopes.bind(null, db))
    .then(() => db)
}
