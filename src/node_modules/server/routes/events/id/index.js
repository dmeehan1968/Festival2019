import React from 'react'
import ReactDOMServer from 'react-dom/server'
import { Provider } from 'react-redux'
import { createStore } from 'redux'
import rootReducer from 'app/reducers'
import Html from 'app/components/Html'
import EventPage from 'app/components/EventPage'
import { Helmet } from 'react-helmet'

export function get(req, res, next) {
  const db = req.app.get('db')

  Promise.all([
    getEvents(db),
    getDates(db),
    getEvent(db, req.params.event)
  ])
  .then(transformArrayToObject)
  .then(setServerResponse.bind(null, req.params.event, res.status.bind(res)))
  .then(createStoreFromResults)
  .then(renderPageFromStore)
  .then(response => res.send(response))
  .catch(next)
}

const sequelizeInstanceToJSON = instance => instance.toJSON()

const sequelizeArrayToJSON = arr => arr.map(sequelizeInstanceToJSON)

const getEvents = (db) => {
  return db.models.events.scope('eventlist')
    .findAll()
    .then(sequelizeArrayToJSON)
}

const getEvent = (db, eventId) => {
  return eventId ? db.models.events
    .findOne({
      where: { id: eventId }
    })
    .then(sequelizeInstanceToJSON) : null
}

const getDates = (db) => {
  return db.models.dates
    .findAll({ order: [ 'date' ] })
    .then(sequelizeArrayToJSON)
}

const transformArrayToObject = ([ events, dates, event ]) => {
  return {
    events: events,
    dates: dates,
    event: event,
  }
}

const createStoreFromResults = initialData => {
  return createStore(rootReducer, initialData)
}

const renderPageFromStore = store => {
  return Html(
    Helmet.renderStatic(),
    ReactDOMServer.renderToString((
      <Provider store={store}>
        <EventPage />
      </Provider>
    )),
    store.getState()
  )
}

const setServerResponse = (eventId, statusCallback, results) => {
  statusCallback(eventId && ! results.event ? 404 : 200)
  return results
}
