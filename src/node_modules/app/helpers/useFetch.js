import { useState, useReducer, useEffect } from 'react'
import axios from 'axios'

const dataFetchReducer = (state, action) => {
  switch (action.type) {
    case 'FETCH_LOADING':
      return {
        ...state,
        isLoading: true,
        isError: false,
      }
    case 'FETCH_SUCCESS':
      return {
        ...state,
        isLoading: false,
        data: action.payload,
      }
    case 'FETCH_ERROR':
      return {
        ...state,
        isLoading: false,
        isError: true,
      }
    default: {
      throw new Error()
    }
  }
}

export default (initialUrl, initialData) => {
  const [ state, dispatch ] = useReducer(dataFetchReducer, {
    isLoading: false, isError: false, data: initialData
  })
  const [ url, setUrl ] = useState(initialUrl)

  useEffect(() => {
    (async () => {
      dispatch({ type: 'FETCH_LOADING' })
      try {
        const { data = {} } = await axios(url)
        dispatch({ type: 'FETCH_SUCCESS', payload: data })
      } catch(e) {
        console.error(e)
        dispatch({ type: 'FETCH_ERROR' })
      }
    })()
  }, [url])

  const fetch = (url) => {
    setUrl(url)
  }

  return { ...state, fetch }
}
