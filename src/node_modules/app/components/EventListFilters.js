import React, { useState, useCallback, useEffect, useReducer } from 'react'
import { connect } from 'react-redux'
import { bindActionCreators } from 'redux'
import styles from './EventListFilters.less'
import stringifyClassnames from 'app/helpers/stringifyClassnames'
import SelectedOptions from 'app/components/SelectedOptions'
import useFetch from 'app/helpers/useFetch'
import DateTime from 'app/components/DateTime'
import moment from 'moment'

const EventListFilters = ({ className, filters, setRegionFilter, setDisciplineFilter, setDateFilter }) => {

  const { data, isLoading, isError } = useFetch('/api/filters', {},
    data => ({ ...data, dates: data.dates.map(date=>({ ...date, date: moment(date.date)}))}))
  const [ init, setInit ] = useState(true)
  const [ regions, setRegions ] = useState(filters.regions)
  const [ disciplines, setDisciplines ] = useState(filters.disciplines)
  const [ dates, setDates ] = useState(filters.dates)

  useEffect(() => {
    (() => {
      if (regions.length === 0 && data.regions) {
        setRegions(data.regions.map(r=>r.id))
      }

      if (disciplines.length === 0 && data.disciplines) {
        setDisciplines(data.disciplines.map(d=>d.id))
      }

      if (dates.length === 0 && data.dates) {
        setDates(data.dates.map(d=>d.id))
      }
    })()
  }, [data])

  if (isLoading) {
    return <div>Loading...</div>
  }

  if (isError) {
    return <div>Error!</div>
  }

  if (init) {
    setInit(false)
    return
  }

  const handleSubmit = (e) => {
    setRegionFilter(regions)
    setDisciplineFilter(disciplines)
    setDateFilter(dates)
  }

  const handleRegionChange = (id, selected) => {
    if (selected) {
      setRegions([ ...new Set([ ...regions, id ]) ])
    } else {
      setRegions(regions.filter(region => region !== id))
    }
  }

  const handleRegionSelect = (evt, all) => {
    evt.preventDefault()
    setRegions(all ? data.regions.map(r=>r.id) : [])
  }

  const handleDisciplineChange = (id, selected) => {
    if (selected) {
      setDisciplines([ ...new Set([ ...disciplines, id ]) ])
    } else {
      setDisciplines(disciplines.filter(discipline => discipline !== id))
    }
  }

  const handleDisciplineSelect = (evt, all) => {
    evt.preventDefault()
    setDisciplines(all ? data.disciplines.map(d=>d.id) : [])
  }

  const handleDateChange = (id, selected) => {
    if (selected) {
      setDates([ ...new Set([ ...dates, id ])])
    } else {
      setDates(dates.filter(date => date !== id))
    }
  }

  const handleDateSelect = (evt, all) => {
    evt.preventDefault()
    setDates(all ? data.dates.map(d=>d.id) : [])
  }

  const formatDate = (date) => {
    return <DateTime date={date} format="ddd Do MMM YYYY" />
  }

  return (
    <form className={stringifyClassnames(styles.filters, className)} onSubmit={handleSubmit}>
      <SelectedOptions className={styles.options} title="Regions" options={data.regions} selected={regions} onChange={handleRegionChange} onSelectAll={e => handleRegionSelect(e, true)} onSelectNone={e => handleRegionSelect(e, false)} />
      <SelectedOptions className={styles.options} title="Disciplines" options={data.disciplines} selected={disciplines} onChange={handleDisciplineChange} onSelectAll={e => handleDisciplineSelect(e, true)} onSelectNone={e => handleDisciplineSelect(e, false)} />
      <SelectedOptions className={styles.options} title="Dates" options={data.dates} selected={dates} onChange={handleDateChange} labelKey="date" labelFormat={formatDate} onSelectAll={e => handleDateSelect(e, true)} onSelectNone={e => handleDateSelect(e, false)} />
      <input type="submit" value="Apply" />
    </form>
  )
}

const mapStateToProps = state => ({
  filters: state.filters
})

import * as actionCreators from 'app/ducks/filters'
const mapDispatchToProps = dispatch => bindActionCreators(actionCreators, dispatch)

export default connect(mapStateToProps, mapDispatchToProps)(EventListFilters)
