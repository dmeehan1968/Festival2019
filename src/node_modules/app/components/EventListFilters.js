import React, { useState, useCallback, useEffect, useReducer } from 'react'
import { connect } from 'react-redux'
import styles from './EventListFilters.less'
import stringifyClassnames from 'app/helpers/stringifyClassnames'
import { setRegionFilter } from 'app/actions'
import SelectedOptions from 'app/components/SelectedOptions'
import useFetch from 'app/helpers/useFetch'

const EventListFilters = ({ className, filters, setRegionFilter }) => {

  const { data, isLoading, isError } = useFetch('/api/filters', {})
  const [ regions, setRegions ] = useState(filters.regions || [])

  if (isLoading) {
    return <div>Loading...</div>
  }

  if (isError) {
    return <div>Error!</div>
  }

  const handleSubmit = (e) => {
    setRegionFilter(regions)
  }

  const handleRegionChange = (id, selected) => {
    if (selected) {
      setRegions([ ...new Set([ ...regions, id ]) ])
    } else {
      setRegions(regions.filter(region => region !== id))
    }
  }

  return (
    <form className={stringifyClassnames(styles.filters, className)} onSubmit={handleSubmit}>
      <SelectedOptions className={styles.options} title="Regions" options={data.regions} selected={regions} onChange={handleRegionChange} />
      <input type="submit" value="Apply" />
    </form>
  )
}

const mapStateToProps = state => ({
  filters: state.filters
})

const mapDispatchToProps = dispatch => ({
  setRegionFilter: filters => dispatch(setRegionFilter(filters))
})

export default connect(mapStateToProps, mapDispatchToProps)(EventListFilters)
