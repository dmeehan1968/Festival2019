import React, { useState, useCallback, useEffect, useReducer } from 'react'
import { connect } from 'react-redux'
import styles from './EventListFilters.less'
import stringifyClassnames from 'app/helpers/stringifyClassnames'
import axios from 'axios'
import { setRegionFilter } from 'app/actions'

const RegionSelections = ({ options = [], selections = [], onChange = () => {} }) => {
  return (
    <>
      <div>Regions</div>
      <pre>{JSON.stringify(options)}</pre>
      <pre>{JSON.stringify(selections)}</pre>
      {options.map(opt => {
        return (
          <div key={opt.id}>
            <input
              type="checkbox"
              checked={selections.indexOf(opt.id) !== -1}
              onChange={e => onChange(opt.id, e.target.checked)} />
            <label>{opt.description}</label>
          </div>
        )
      })}
    </>
  )
}

const dataFetchReducer = (state, action) => {
  switch (action.type) {
    case 'FETCH_INIT':
      return {
        ...state,
        isLoading: true,
        isError: false,
      }
    case 'FETCH_SUCCESS':
      return {
        ...state,
        isLoading: false,
        data: action.payload,
      }
    case 'FETCH_ERROR':
      return {
        ...state,
        isLoading: false,
        isError: true,
      }
    default: {
      throw new Error()
    }
  }
}

const useFetch = (initialUrl, initialData) => {
  const [ state, dispatch ] = useReducer(dataFetchReducer, {
    isLoading: false, isError: false, data: initialData
  })
  const [ url, setUrl ] = useState(initialUrl)

  useEffect(() => {
    (async () => {
      dispatch({ type: 'FETCH_INIT' })
      try {
        const { data = {} } = await axios(url)
        dispatch({ type: 'FETCH_SUCCESS', payload: data })
      } catch(e) {
        dispatch({ type: 'FETCH_ERROR' })
      }
    })()
  }, [url])

  const fetch = (url) => {
    setUrl(url)
  }

  return { ...state, fetch }
}

const EventListFilters = ({ className, filters, setRegionFilter }) => {

  const { data, isLoading, isError } = useFetch('/api/filters', {})
  const [ regions, setRegions ] = useState(filters.regions || [])

  if (isLoading) {
    return <div>Loading...</div>
  }

  if (isError) {
    return <div>Error!</div>
  }

  const handleSubmit = (e) => {
    setRegionFilter(regions)
  }

  const handleRegionChange = (id, selected) => {
    if (selected) {
      setRegions([ ...new Set([ ...regions, id ]) ])
    } else {
      setRegions(regions.filter(region => region !== id))
    }
  }

  return (
    <form className={stringifyClassnames(styles.filters, className)} onSubmit={handleSubmit}>
      <RegionSelections options={data.regions} selections={regions} onChange={handleRegionChange} />
      <input type="submit" value="Apply" />
    </form>
  )
}

const mapStateToProps = state => ({
  filters: state.filters
})

const mapDispatchToProps = dispatch => ({
  setRegionFilter: filters => dispatch(setRegionFilter(filters))
})

export default connect(mapStateToProps, mapDispatchToProps)(EventListFilters)
