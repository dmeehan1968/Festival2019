import React, { useState, useCallback, useEffect, useReducer } from 'react'
import { connect } from 'react-redux'
import styles from './EventListFilters.less'
import stringifyClassnames from 'app/helpers/stringifyClassnames'
import { setRegionFilter, setDisciplinesFilter } from 'app/actions'
import SelectedOptions from 'app/components/SelectedOptions'
import useFetch from 'app/helpers/useFetch'

const EventListFilters = ({ className, filters, setRegionFilter, setDisciplinesFilter }) => {

  const { data, isLoading, isError } = useFetch('/api/filters', {})
  const [ regions, setRegions ] = useState(filters.regions || [])
  const [ disciplines, setDisciplines ] = useState(filters.disciplines || [])

  if (isLoading) {
    return <div>Loading...</div>
  }

  if (isError) {
    return <div>Error!</div>
  }

  if (regions.length === 0 && data.regions) {
    setRegions(data.regions.map(r=>r.id))
    return
  }

  if (disciplines.length === 0 && data.disciplines) {
    setDisciplines(data.disciplines.map(d=>d.id))
    return
  }

  // TODO: useReducer instead of multiple useState's to reduce multiple re-renders.

  const handleSubmit = (e) => {
    setRegionFilter(regions)
    setDisciplinesFilter(disciplines)
  }

  const handleRegionChange = (id, selected) => {
    if (selected) {
      setRegions([ ...new Set([ ...regions, id ]) ])
    } else {
      setRegions(regions.filter(region => region !== id))
    }
  }

  const handleDisciplineChange = (id, selected) => {
    if (selected) {
      setDisciplines([ ...new Set([ ...disciplines, id ]) ])
    } else {
      setDisciplines(disciplines.filter(disciplines => disciplines !== id))
    }
  }

  return (
    <form className={stringifyClassnames(styles.filters, className)} onSubmit={handleSubmit}>
      <SelectedOptions className={styles.options} title="Regions" options={data.regions} selected={regions} onChange={handleRegionChange} />
      <SelectedOptions className={styles.options} title="Disciplines" options={data.disciplines} selected={disciplines} onChange={handleDisciplineChange} />
      <input type="submit" value="Apply" />
    </form>
  )
}

const mapStateToProps = state => ({
  filters: state.filters
})

const mapDispatchToProps = dispatch => ({
  setRegionFilter: regions => dispatch(setRegionFilter(regions)),
  setDisciplinesFilter: disciplines => dispatch(setDisciplinesFilter(disciplines))
})

export default connect(mapStateToProps, mapDispatchToProps)(EventListFilters)
