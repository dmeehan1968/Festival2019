import React, { useState, useCallback, useEffect, useReducer } from 'react'
import { connect } from 'react-redux'
import styles from './EventListFilters.less'
import stringifyClassnames from 'app/helpers/stringifyClassnames'
import { setRegionFilter, setDisciplinesFilter } from 'app/actions'
import SelectedOptions from 'app/components/SelectedOptions'
import useFetch from 'app/helpers/useFetch'

const filterReducer = (state = { init: true, regions: [], disciplines: []}, action) => {
  switch (action.type) {
    case 'SET_REGIONS': {
      return { ...state, regions: action.payload }
    }
    case 'SET_DISCIPLINES': {
      return { ...state, disciplines: action.payload }
    }
  }
  return state
}

const EventListFilters = ({ className, filters, setRegionFilter, setDisciplinesFilter }) => {

  const { data, isLoading, isError } = useFetch('/api/filters', {})
  const [ state, dispatch ] = useReducer(filterReducer, {
    regions: filters.regions || [],
    disciplines: filters.disciplines || [],
  })

  useEffect(() => {
    (() => {
      if (state.regions.length === 0 && data.regions) {
        dispatch({ type: 'SET_REGIONS', payload: data.regions.map(r=>r.id) })
      }

      if (state.disciplines.length === 0 && data.disciplines) {
        dispatch({ type: 'SET_DISCIPLINES', payload: data.disciplines.map(d=>d.id) })
      }
    })()
  }, [data])

  if (isLoading) {
    return <div>Loading...</div>
  }

  if (isError) {
    return <div>Error!</div>
  }

  const handleSubmit = (e) => {
    setRegionFilter(state.regions)
    setDisciplinesFilter(state.disciplines)
  }

  const handleRegionChange = (id, selected) => {
    if (selected) {
      dispatch({ type: 'SET_REGIONS', payload: [ ...new Set([ ...state.regions, id ]) ] })
    } else {
      dispatch({ type: 'SET_REGIONS', payload: state.regions.filter(region => region !== id) })
    }
  }

  const handleDisciplineChange = (id, selected) => {
    if (selected) {
      dispatch({ type: 'SET_DISCIPLINES', payload: [ ...new Set([ ...state.disciplines, id ]) ] })
    } else {
      dispatch({ type: 'SET_DISCIPLINES', payload: state.disciplines.filter(discipline => discipline !== id) })
    }
  }

  return (
    <form className={stringifyClassnames(styles.filters, className)} onSubmit={handleSubmit}>
      <SelectedOptions className={styles.options} title="Regions" options={data.regions} selected={state.regions} onChange={handleRegionChange} />
      <SelectedOptions className={styles.options} title="Disciplines" options={data.disciplines} selected={state.disciplines} onChange={handleDisciplineChange} />
      <input type="submit" value="Apply" />
    </form>
  )
}

const mapStateToProps = state => ({
  filters: state.filters
})

const mapDispatchToProps = dispatch => ({
  setRegionFilter: regions => dispatch(setRegionFilter(regions)),
  setDisciplinesFilter: disciplines => dispatch(setDisciplinesFilter(disciplines))
})

export default connect(mapStateToProps, mapDispatchToProps)(EventListFilters)
