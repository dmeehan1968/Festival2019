import React, { useState, useEffect } from 'react'
import { connect } from 'react-redux'
import moment from 'moment'

import EventList from 'app/components/EventList'

const filterEvent = (filters, event) => {

  const intersection = (arr1, arr2, comparitor = () => true) => {
    return arr1.filter(item1 => arr2.filter(item2 => comparitor(item1, item2)).length > 0)
  }

  if (filters.regions.length > 0) {

    if (!event.venue || !event.venue.regions) {
      return false
    }

    if (intersection(
      event.venue.regions,
      filters.regions,
      (region, regionId) => region.id === regionId
    ).length === 0) {
      return false
    }

  }

  if (filters.disciplines.length > 0) {

    if (intersection(
      event.disciplines,
      filters.disciplines,
      (discipline, disciplineId) => discipline.id === disciplineId
    ).length === 0) {
      return false
    }

  }

  if (filters.dates.length > 0) {

    if (event.opening_times.map(open => ({
      ...open,
      start: moment.utc(open.start),
      end: moment.utc(open.end),
    }))
    .filter(open => {
      return filters.dates.filter(date => open.start.isSame(date, 'day')).length > 0
    })
    .length === 0) {
      return false
    }

    if (filters.text.length > 0) {
      const text = filters.text.toLowerCase().trim()
      return [
        event.title,
        event.subtitle,
        event.shortdesc,
      ].reduce((accum, value) => accum || (value || '').toLowerCase().includes(text), false)
    }

    return true

  }

  return true


}

const FilteredEventList = ({ events, filters, dates }) => {
  filters = {
    ...filters,
    dates: filters.dates.map(dateId => {
      const date = dates.find(date => date.id === dateId)
      if (date) {
        return moment.utc(date.date)
      }
      throw new Error('no matching date')
    })
  }

  const [ isClient, setIsClient ] = useState(false)
  useEffect(() => setIsClient(true))

  return (
    <EventList events={isClient && events.filter(filterEvent.bind(null, filters)) || events} />
  )
}

const mapStateToProps = (state) => ({
  events: state.events,
  filters: state.filters,
  dates: state.dates,
})

const mapDispatchToProps = (dispatch) => ({})

export default connect(mapStateToProps, mapDispatchToProps)(FilteredEventList)
